name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  # Job para varredura de segurança Ruby (Brakeman)
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  # Job para varredura de segurança JavaScript (Importmap)
  scan_js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  # Job para linting de código (Rubocop)
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  # Job principal para execução dos testes
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0 # Sua versão 8.0.33 se encaixa perfeitamente aqui
        env:
          # É crucial que esta variável de ambiente do serviço MySQL seja definida
          # O valor real da senha virá do GitHub Secret.
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }} 
          MYSQL_DATABASE: onibus_app_test
        ports:
          - "3306:3306"
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -p${MYSQL_ROOT_PASSWORD}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Install apt packages
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential git pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Configure database.yml for CI
        run: |
          # Reconstroi o database.yml focando nas configs de CI, usando host e port
          cat << EOF > config/database.yml
          default: &default
            adapter: mysql2
            encoding: utf8mb4
            pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
            username: <%= ENV["ENV_NAME_DATABASE"] %>
            password: <%= ENV["ENV_PASSWORD_DATABASE"] %>
            host: 127.0.0.1
            port: 3306

          development:
            <<: *default
            database: onibus_app_development

          test:
            <<: *default
            database: onibus_app_test

          production:
            primary: &primary_production
              <<: *default
              database: onibus_app_production
              username: onibus_app
              password: <%= ENV["ONIBUS_APP_DATABASE_PASSWORD"] %>
            cache:
              <<: *primary_production
              database: onibus_app_production_cache
              migrations_paths: db/cache_migrate
            queue:
              <<: *primary_production
              database: onibus_app_production_queue
              migrations_paths: db/queue_migrate
            cable:
              <<: *primary_production
              database: onibus_app_production_cable
              migrations_paths: db/cable_migrate
          EOF
        env:
          # Para este step, definimos as variáveis que o Rails usará para o database.yml
          ENV_NAME_DATABASE: root
          ENV_PASSWORD_DATABASE: ${{ secrets.MYSQL_ROOT_PASSWORD }} # A senha do root do MySQL

      - name: Wait for MySQL to be ready ⏳
        run: |
          sudo apt-get install -y mysql-client
          # O comando mysql espera as credenciais via -u e -p
          until mysql -h 127.0.0.1 -P 3306 -u "${ENV_NAME_DATABASE}" -p"${ENV_PASSWORD_DATABASE}" -e "SELECT 1"; do
            echo "Waiting for MySQL service..."
            sleep 5
          done
          echo "MySQL is up and running!"
        env:
          # As variáveis de ambiente que o comando 'mysql' usará
          ENV_NAME_DATABASE: root
          ENV_PASSWORD_DATABASE: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Create and Migrate Test Database 💾
        run: |
          bin/rails db:test:prepare
        env:
          RAILS_ENV: test
          # As variáveis de ambiente que o Rails usará para a conexão com o DB de teste
          ENV_NAME_DATABASE: root
          ENV_PASSWORD_DATABASE: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Run RSpec tests 🚀
        run: bundle exec rspec
        env:
          RAILS_ENV: test
          # As variáveis de ambiente que o RSpec/Rails usará para a conexão com o DB de teste
          ENV_NAME_DATABASE: root
          ENV_PASSWORD_DATABASE: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore