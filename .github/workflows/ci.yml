name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  # Job para varredura de seguran√ßa Ruby (Brakeman)
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  # Job para varredura de seguran√ßa JavaScript (Importmap)
  scan_js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  # Job para linting de c√≥digo (Rubocop)
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  # Job principal para execu√ß√£o dos testes
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: onibus_app_test 
        ports:
          - "3306:3306"
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -p${MYSQL_ROOT_PASSWORD}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Install apt packages
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev build-essential git pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Configure database.yml for CI
        run: |
          # Remove a linha do 'socket' e adiciona 'host' para o ambiente de CI
          # Cria um backup do original por seguran√ßa
          mv config/database.yml config/database.yml.bak

          # Reconstroi o database.yml focando nas configs de CI
          # Usaremos a mesma estrutura do seu original, mas injetando host e port
          # e garantindo que as vari√°veis ENV_NAME_DATABASE e ENV_PASSWORD_DATABASE
          # sejam definidas nos 'env' dos steps
          cat << EOF > config/database.yml
          default: &default
            adapter: mysql2
            encoding: utf8mb4
            pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
            username: <%= ENV["ENV_NAME_DATABASE"] %>
            password: <%= ENV["ENV_PASSWORD_DATABASE"] %>
            # No CI, conectamos via host/port, n√£o socket.
            # O host √© 127.0.0.1 porque o servi√ßo MySQL est√° rodando no mesmo host da VM do Actions.
            host: 127.0.0.1
            port: 3306

          development:
            <<: *default
            database: onibus_app_development

          test:
            <<: *default
            database: onibus_app_test

          production:
            primary: &primary_production
              <<: *default
              database: onibus_app_production
              username: onibus_app
              password: <%= ENV["ONIBUS_APP_DATABASE_PASSWORD"] %>
            cache:
              <<: *primary_production
              database: onibus_app_production_cache
              migrations_paths: db/cache_migrate
            queue:
              <<: *primary_production
              database: onibus_app_production_queue
              migrations_paths: db/queue_migrate
            cable:
              <<: *primary_production
              database: onibus_app_production_cable
              migrations_paths: db/cable_migrate
          EOF

      - name: Wait for MySQL to be ready ‚è≥
        run: |
          sudo apt-get install -y mysql-client # Instala o cliente MySQL para o comando 'mysql'
          until mysql -h 127.0.0.1 -P 3306 -u "${ENV_NAME_DATABASE}" -p"${ENV_PASSWORD_DATABASE}" -e "SELECT 1"; do
            echo "Waiting for MySQL service..."
            sleep 5
          done
          echo "MySQL is up and running!"
        env:

          ENV_NAME_DATABASE: root 
          ENV_PASSWORD_DATABASE: ${{ secrets.MYSQL_ROOT_PASSWORD }}

          MYSQL_ROOT_PASSWORD: ${{ services.mysql.env.ENV_PASSWORD_DATABASE }}

      - name: Create and Migrate Test Database üíæ
        run: |
          bin/rails db:test:prepare
        env:
          RAILS_ENV: test
          ENV_NAME_DATABASE: root
          ENV_PASSWORD_DATABASE: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Run RSpec tests üöÄ
        run: bundle exec rspec
        env:
          RAILS_ENV: test
          
          ENV_NAME_DATABASE: root
          ENV_PASSWORD_DATABASE: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore